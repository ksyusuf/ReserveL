import { useState, useEffect, useCallback } from 'react';
import { autoNoShowCheck } from '@/lib/utils';
import { updateReservationStatusOnContract, initializeContract } from '@/contracts/contractActions';
import { Reservation } from '@/types/Reservation';

export default function useReservations({ onReservationCreated, lastCreatedReservationId }: any) {
  // Yorum ve log satƒ±rlarƒ±nƒ± silme!
  const [reservations, setReservations] = useState<Reservation[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const [updatingContract, setUpdatingContract] = useState<string | null>(null);
  const [editingNotes, setEditingNotes] = useState<string | null>(null);
  const [noteText, setNoteText] = useState('');
  const [copiedId, setCopiedId] = useState<string | null>(null);
  const [autoUpdatingAttendance, setAutoUpdatingAttendance] = useState<string | null>(null);

  // Yoruma √∂zel URL olu≈üturucu
  const getApprovalUrl = useCallback((reservationId: string) => {
    return `https://reserve-l.vercel.app/customer-page?reservationId=${reservationId}`;
  }, []);

  // Panoya kopyalama fonksiyonu
  const handleCopyUrl = useCallback((reservationId: string) => {
    const url = getApprovalUrl(reservationId);
    navigator.clipboard.writeText(url);
    setCopiedId(reservationId);
    setTimeout(() => setCopiedId(null), 1500);
  }, [getApprovalUrl]);

  const fetchReservations = async () => {
    try {
      setError(null);
      const response = await fetch('/api/reservations');
      const data = await response.json();
      if (!response.ok) {
        throw new Error(data.error || 'Rezervasyonlar y√ºklenirken bir hata olu≈ütu');
      }
      setReservations(data);
      setRetryCount(0); // Ba≈üarƒ±lƒ± olursa retry sayacƒ±nƒ± sƒ±fƒ±rla
      // Otomatik no_show kontrol√º (global fonksiyon ile)
      setTimeout(async () => {
        const updatedIds = await autoNoShowCheck(data);
        if (updatedIds.length > 0) {
          // Spinner state'i g√ºncelle
          setAutoUpdatingAttendance(updatedIds[0]); // Aynƒ± anda birden fazla i√ßin ilkini g√∂ster
          await fetchReservations();
          setAutoUpdatingAttendance(null);
        }
      }, 0);
    } catch (error) {
      console.error('Error fetching reservations:', error);
      setError(error instanceof Error ? error.message : 'Rezervasyonlar y√ºklenirken bir hata olu≈ütu');
      if (retryCount < 3) {
        setRetryCount((prev) => prev + 1);
        setTimeout(fetchReservations, 2000); // 2 saniye sonra tekrar dene
      }
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchReservations();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const updateReservationStatus = async (
    reservationId: string,
    status: 'confirmed' | 'cancelled'
  ) => {
    try {
      setError(null);
      const response = await fetch(`/api/reservations?id=${reservationId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ confirmationStatus: status }),
      });
      if (!response.ok) {
        throw new Error('Rezervasyon g√ºncellenirken bir hata olu≈ütu');
      }
      await fetchReservations();
    } catch (error) {
      console.error('Error updating reservation:', error);
      setError('Rezervasyon g√ºncellenirken bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
    }
  };

  const confirmPendingReservation = async (reservationId: string) => {
    try {
      setError(null);
      const response = await fetch('/api/reservations/confirm-pending', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reservationId }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Rezervasyon onaylanƒ±rken bir hata olu≈ütu');
      }
      await fetchReservations();
    } catch (error) {
      console.error('Error confirming pending reservation:', error);
      setError('Rezervasyon onaylanƒ±rken bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
    }
  };

  const cancelConfirmedReservation = async (reservationId: string) => {
    try {
      setError(null);
      const response = await fetch('/api/reservations/cancel-confirmed', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reservationId }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Rezervasyon iptal edilirken bir hata olu≈ütu');
      }
      await fetchReservations();
    } catch (error) {
      console.error('Error cancelling confirmed reservation:', error);
      setError('Rezervasyon iptal edilirken bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
    }
  };

  const updateContractStatus = async (blockchainReservationId: string, newStatus: 'Completed' | 'NoShow') => {
    console.log('üîç updateContractStatus ba≈üladƒ±:', { blockchainReservationId, newStatus });
    setUpdatingContract(blockchainReservationId);
    setError(null);
    // Eƒüer bu yeni olu≈üturulan rezervasyon ise, lastCreatedReservationId'yi kullan
    let blockchainId = lastCreatedReservationId;
    // Hala yoksa, rezervasyonu bul ve blockchain ID'sini al
    if (!blockchainId) {
      console.log('üîç lastCreatedReservationId yok, rezervasyon aranƒ±yor...');
      const reservation = reservations.find(r => r.blockchainReservationId === blockchainReservationId);
      console.log('üîç bulunan rezervasyon:', reservation);
      if (!reservation || !reservation.blockchainReservationId) {
        console.error('‚ùå Blockchain rezervasyon ID bulunamadƒ±');
        setError('Blockchain rezervasyon ID bulunamadƒ±. Bu rezervasyon eski bir rezervasyon olabilir.');
        setUpdatingContract(null);
        return;
      }
      blockchainId = reservation.blockchainReservationId;
    }
    console.log('üîç Blockchain ID kullanƒ±lƒ±yor:', blockchainId);
    console.log('üîç updateReservationStatusOnContract √ßaƒürƒ±lƒ±yor...');
    const result = await updateReservationStatusOnContract(blockchainId, newStatus);
    console.log('üîç updateReservationStatusOnContract sonucu:', result);
    if (result.success) {
      console.log('‚úÖ Kontrat g√ºncelleme ba≈üarƒ±lƒ±!');
      if (newStatus === 'Completed') {
        console.log('üîç Alert g√∂steriliyor...');
      }
      console.log('üîç Rezervasyonlar yenileniyor...');
      await fetchReservations();
    } else {
      console.error('‚ùå Kontrat g√ºncelleme hatasƒ±:', result.error);
      setError(`Kontrat g√ºncellenirken hata: ${result.error}`);
    }
    setUpdatingContract(null);
  };

  const updateAttendanceStatus = async (
    reservationId: string,
    attendanceStatus: 'not_arrived' | 'arrived' | 'no_show',
    blockchainReservationId?: string
  ) => {
    console.log('üîç updateAttendanceStatus ba≈üladƒ±:', { reservationId, attendanceStatus });
    try {
      setError(null);
      const response = await fetch('/api/reservations/update-attendance', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reservationId, attendanceStatus }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Gelme durumu g√ºncellenirken bir hata olu≈ütu');
      }
      console.log('üîç API g√ºncelleme ba≈üarƒ±lƒ±, kontrat g√ºncelleme kontrol ediliyor...');
      // Eƒüer m√º≈üteri geldi olarak i≈üaretlendiyse, kontrat durumunu da g√ºncelle
      if (attendanceStatus === 'arrived') {
        if (blockchainReservationId) {
          console.log('üîç M√º≈üteri geldi, kontrat durumu Completed olarak g√ºncelleniyor...');
          await updateContractStatus(blockchainReservationId, 'Completed');
        } else {
          console.log('‚ö†Ô∏è blockchainReservationId yok, kontrat g√ºncellemesi yapƒ±lmƒ±yor');
        }
      } else if (attendanceStatus === 'no_show') {
        if (blockchainReservationId) {
          console.log('üîç M√º≈üteri gelmedi, kontrat durumu NoShow olarak g√ºncelleniyor...');
          await updateContractStatus(blockchainReservationId, 'NoShow');
        } else {
          console.log('‚ö†Ô∏è blockchainReservationId yok, kontrat g√ºncellemesi yapƒ±lmƒ±yor');
        }
      }
      console.log('üîç Rezervasyonlar yenileniyor...');
      await fetchReservations();
    } catch (error) {
      console.error('‚ùå updateAttendanceStatus hatasƒ±:', error);
      setError('Gelme durumu g√ºncellenirken bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
    }
  };

  const updateReservationNotes = async (reservationId: string, notes: string) => {
    try {
      setError(null);
      const response = await fetch(`/api/reservations?id=${reservationId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ notes }),
      });
      if (!response.ok) {
        throw new Error('Not g√ºncellenirken bir hata olu≈ütu');
      }
      await fetchReservations();
      setEditingNotes(null);
      setNoteText('');
    } catch (error) {
      console.error('Error updating notes:', error);
      setError('Not g√ºncellenirken bir hata olu≈ütu. L√ºtfen tekrar deneyin.');
    }
  };

  return {
    reservations,
    isLoading,
    error,
    updatingContract,
    autoUpdatingAttendance,
    fetchReservations,
    updateAttendanceStatus,
    updateReservationStatus,
    confirmPendingReservation,
    cancelConfirmedReservation,
    updateReservationNotes,
    editingNotes,
    setEditingNotes,
    noteText,
    setNoteText,
    copiedId,
    handleCopyUrl,
  };
} 